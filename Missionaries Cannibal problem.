def safe(m, c): return (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)
def moves(m, c, b):
    for dm, dc in [(1,0),(2,0),(0,1),(0,2),(1,1)]:
        nm, nc, nb = (m - dm, c - dc, 0) if b else (m + dm, c + dc, 1)
        if 0 <= nm <= 3 and 0 <= nc <= 3 and safe(nm, nc): yield (nm, nc, nb)

def solve():
    from collections import deque
    q = deque([((3,3,1), [(3,3,1)])])
    seen = set()
    while q:
        (m,c,b), path = q.popleft()
        if (m,c,b) == (0,0,0): return path
        for nxt in moves(m,c,b):
            if nxt not in seen:
                seen.add(nxt)
                q.append((nxt, path + [nxt]))

for step in solve(): print(step)

