import heapq

def manhattan(state):
    return sum(abs((val-1)//3 - i//3) + abs((val-1)%3 - i%3)
               for i, val in enumerate(state) if val)

def neighbors(state):
    i = state.index(0)
    moves = []
    for d in (-1, 1, -3, 3):
        j = i + d
        if 0 <= j < 9 and (i//3 == j//3 if abs(d)==1 else True):
            s = list(state)
            s[i], s[j] = s[j], s[i]
            moves.append(tuple(s))
    return moves

def solve(start, goal):
    heap = [(manhattan(start), 0, start, [])]
    seen = set()
    while heap:
        _, g, curr, path = heapq.heappop(heap)
        if curr == goal: return path + [curr]
        if curr in seen: continue
        seen.add(curr)
        for n in neighbors(curr):
            heapq.heappush(heap, (g+1+manhattan(n), g+1, n, path + [curr]))

start = (1, 2, 3, 4, 0, 6, 7, 5, 8)
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)

for step in solve(start, goal):
    print(step[:3], step[3:6], step[6:], '\n')
